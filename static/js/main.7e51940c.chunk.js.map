{"version":3,"sources":["components/counter.js","components/rune.js","components/rune-grid.js","components/rune-calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","pointsSpent","this","props","value","totalPoints","maxPoints","className","Component","Rune","runeElementClass","runeIconClass","runeClass","isActivated","onClick","e","canBeActivated","onContextMenu","canBeDeactivated","preventDefault","RuneGrid","state","maxColumns","maxRows","rowIndex","items","columns","column","item","find","row","push","pathClass","rows","i","renderRunes","RuneCalculator","pointsUsed","gridItems","points","handleClick","increment","type","potentialVal","updateGridItems","setState","runeClicked","nextRune","previousRune","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e51940c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n/**\r\n * Component for rendering the points display\r\n */\r\nclass Counter extends Component {\r\n    render() {\r\n        let pointsSpent = this.props.value;\r\n        let totalPoints = this.props.maxPoints;\r\n        return (\r\n            <div className=\"counter-widget\">\r\n                <div className=\"counter\">\r\n                    {pointsSpent} / {totalPoints}     \r\n                </div>\r\n                <div className=\"tag\">\r\n                    Points Spent\r\n                </div>\r\n            </div>\r\n        \r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\r\n\r\n/**\r\n * Component for rendering an individual rune\r\n */\r\nclass Rune extends Component {\r\n    render() {\r\n        let runeElementClass = \"rune\";\r\n        let runeIconClass = this.props.runeClass;\r\n        if (!this.props.isActivated) {\r\n            runeElementClass += \" deactivated\";\r\n            runeIconClass += \" deactivated\";\r\n        }\r\n\r\n        return (\r\n            <div className=\"rune-wrapper\">\r\n                <div className={runeElementClass}>\r\n                    <div \r\n                        className={runeIconClass} \r\n                        onClick={(e) => (this.props.canBeActivated) ? this.props.onClick(e) : 0} \r\n                        onContextMenu={(e) => (this.props.canBeDeactivated) ? this.props.onClick(e) : e.preventDefault()}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Rune;","import React, { Component } from 'react';\r\nimport Rune from \"./rune\";\r\n\r\n/**\r\n * Component for rendering rune grid given array of items\r\n */\r\nclass RuneGrid extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            maxColumns: 4,\r\n            maxRows: 2\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Insert runes into columns for row\r\n     * @param {int} rowIndex Index of current row\r\n     */\r\n    renderRunes(rowIndex) {\r\n        var items = this.props.items;\r\n        let columns = [];\r\n        for (let column = 0; column < this.state.maxColumns; column++) {\r\n            let item = items.find(e => e.row === rowIndex && e.column === column);\r\n            if (item) {\r\n                columns.push(\r\n                    <Rune\r\n                        key={column}\r\n                        runeClass={item.className}\r\n                        isActivated={item.isActivated}\r\n                        canBeActivated={item.canBeActivated}\r\n                        canBeDeactivated={item.canBeDeactivated}\r\n                        onClick={(e) => this.props.onClick(e, item.className)}\r\n                    />\r\n                );\r\n                // add path if there is another rune coming up\r\n                if (column < this.state.maxColumns - 1) {\r\n                    let nextRune = items.find(e => e.row == rowIndex && e.column === column+1);\r\n                    let pathClass = \"path\" + ((!nextRune.isActivated) ? \" deactivated\" : \"\");\r\n                    columns.push(\r\n                        <div className={pathClass} key={`path-${column}`} />\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return columns;\r\n    }\r\n\r\n    /**\r\n     * Render rune grid\r\n     */\r\n    render() {\r\n        var rows = [];\r\n        for (let i = 0; i < this.state.maxRows; i++) {\r\n            rows.push(\r\n                <div className=\"row\" key={`row-${i}`}>\r\n                    <span>TALENT PATH {i+1}</span>\r\n                    {this.renderRunes(i)}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n        <div className=\"rune-grid\">\r\n            {rows}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RuneGrid;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\nimport RuneGrid from './rune-grid';\r\n\r\n/**\r\n * Component for managing state of run grid items\r\n * and updating the counter when valid changes are detected\r\n */\r\nclass RuneCalculator extends Component {\r\n    /**\r\n     * Set app defaults\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            maxPoints: 6,\r\n            pointsUsed: 0,\r\n            rows: 2,\r\n            gridItems: [\r\n                { row: 0, column: 0, className: \"stack\", canBeActivated: true },\r\n                { row: 0, column: 1, className: \"utensils\", canBeActivated: false },\r\n                { row: 0, column: 2, className: \"cake\", canBeActivated: false },\r\n                { row: 0, column: 3, className: \"crown\", canBeActivated: false },\r\n                { row: 1, column: 0, className: \"boat\", canBeActivated: true },\r\n                { row: 1, column: 1, className: \"snorkle\", canBeActivated: false },\r\n                { row: 1, column: 2, className: \"bolt\", canBeActivated: false },\r\n                { row: 1, column: 3, className: \"skull\", canBeActivated: false },\r\n            ]\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Render rune grid and calculator\r\n     */\r\n    render() {\r\n        const points = this.state.pointsUsed;\r\n        const maxPoints = this.state.maxPoints;\r\n        return (\r\n            <div className=\"content\">\r\n              <RuneGrid\r\n                items={this.state.gridItems}\r\n                onClick={(e, runeClass) => this.handleClick(e, runeClass)}\r\n              />\r\n              <Counter value={points} maxPoints={maxPoints} />\r\n            </div>\r\n          );\r\n    }\r\n\r\n    /**\r\n     * Update counter when points are added/removed\r\n     * @param {EventArgs} e Event fired\r\n     * @param {string} runeClass Rune updated\r\n     */\r\n    handleClick(e, runeClass) {\r\n        var increment = 0;\r\n        if (e.type === 'click') {\r\n            increment = 1;\r\n        } else if (e.type === 'contextmenu') {\r\n            e.preventDefault();\r\n            increment = -1;\r\n        } \r\n\r\n        // Ensure value will be in proper range after update\r\n        var potentialVal = this.state.pointsUsed + increment;\r\n        if (potentialVal <= this.state.maxPoints && \r\n            potentialVal >= 0) {\r\n                this.updateGridItems(increment, runeClass)\r\n                this.setState({\r\n                    pointsUsed: potentialVal\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine what grid items to update\r\n     * @param {int} increment Positive/Negative increment\r\n     * @param {string} runeClass Rune updated\r\n     */\r\n    updateGridItems(increment, runeClass) {        \r\n        // Shallow copy items\r\n        let items = this.state.gridItems;\r\n        let runeClicked = items.find(i => i.className == runeClass);\r\n        let nextRune = items.find(i => i.column === runeClicked.column + 1 && i.row === runeClicked.row);\r\n        let previousRune = items.find(i => i.column === runeClicked.column - 1 && i.row === runeClicked.row);\r\n\r\n        // Update node and surrounding items\r\n        if (increment > 0) {\r\n            // Activate\r\n            if (nextRune) {\r\n                nextRune.canBeActivated = true;\r\n            }\r\n            if (previousRune) {\r\n                previousRune.canBeDeactivated = false;\r\n            }\r\n            runeClicked.isActivated = true;\r\n            runeClicked.canBeActivated = false;\r\n            runeClicked.canBeDeactivated = true;\r\n        } else {\r\n            // Deactivate\r\n            if (nextRune) {\r\n                nextRune.canBeActivated = false;\r\n            }\r\n            if (previousRune){\r\n                previousRune.canBeDeactivated = true;\r\n            }\r\n            runeClicked.isActivated = false;\r\n            runeClicked.canBeActivated = true;\r\n            runeClicked.canBeDeactivated = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default RuneCalculator;\r\n","import './App.scss';\nimport RuneCalculator from './components/rune-calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>TitanStar Legends - Rune Mastery Loadout Talent Calculator 9000</header>\n      <RuneCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}